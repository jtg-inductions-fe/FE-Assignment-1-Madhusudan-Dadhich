/// Mixin to generate font face for a font family
///
/// @param {Map} $font-config - Map of font configuration
@mixin font-face($font-config) {
    $family: map-get(
        $map: $font-config,
        $key: 'font-family',
    );
    $path: map-get(
        $map: $font-config,
        $key: 'path',
    );
    $file: map-get(
        $map: $font-config,
        $key: 'file',
    );
    $weight: map-get(
        $map: $font-config,
        $key: 'font-weight',
    );
    $style: map-get(
        $map: $font-config,
        $key: 'font-style',
    );

    @font-face {
        font-family: $family;
        src: url($path + $file + '.eot');
        src:
            url($path + $file + '.eot?#iefix') format('embedded-opentype'),
            url($path + $file + '.woff') format('woff'),
            url($path + $file + '.ttf') format('truetype');
        font-weight: $weight;
        font-style: $style;
    }
}

/// Mixin to handle media query for defined max width
///
/// @content [It contains the rules to manage responsiveness for screen max width]
///
/// @param {String} $max-width - max width to constraint media screen
@mixin media-down($max-width) {
    @media screen and (max-width: #{$max-width}) {
        @content;
    }
}

/// Mixin to handle media query for defined min width
///
/// @content [It contains the rules to manage responsiveness for screen min width]
///
/// @param {String} $min-width - min width to constraint media screen
@mixin media-up($min-width) {
    @media screen and (min-width: #{$min-width}) {
        @content;
    }
}

/// Mixin to generate font styles
///
/// @param {Map} $font-config - Map of font configurations
/// @param {String} $font-size - Font size
/// @param {Number} $line-height - Line Height
@mixin font-style($font-config, $font-size, $line-height) {
    $font-family: map-get(
        $map: $font-config,
        $key: 'font-family',
    );
    $font-weight: map-get(
        $map: $font-config,
        $key: 'font-weight',
    );

    font-family: $font-family;
    font-weight: #{$font-weight};
    font-size: #{$font-size};
    line-height: #{$line-height};
}

@mixin prefix-properties($prefixes, $property, $value) {
    @each $prefix in $prefixes {
        #{$prefix}-#{$property}: $value;
    }
    $property: $value;
}

%grayscale-50 {
    @include prefix-properties(('-webkit', '-moz'), filter, grayscale(50%));
}
