@use 'sass:map';
@use './variables' as *;
@use './colors' as *;
@use './functions' as *;

/// Mixin to generate font face for a font family
///
/// @param {Map} $font-config - Map of font configuration
@mixin font-face($font-config) {
    $family: map.get(
        $map: $font-config,
        $key: 'font-family',
    );
    $path: map.get(
        $map: $font-config,
        $key: 'path',
    );
    $file: map.get(
        $map: $font-config,
        $key: 'file',
    );
    $weight: map.get(
        $map: $font-config,
        $key: 'font-weight',
    );
    $style: map.get(
        $map: $font-config,
        $key: 'font-style',
    );

    @font-face {
        font-family: $family;
        src: url($path + $file + '.eot');
        src:
            url($path + $file + '.eot?#iefix') format('embedded-opentype'),
            url($path + $file + '.woff') format('woff'),
            url($path + $file + '.ttf') format('truetype');
        font-weight: $weight;
        font-style: $style;
    }
}

/// Mixin to handle media query for defined max width
///
/// @content [It contains the rules to manage responsiveness for screen max width]
///
/// @param {String} $max-width - max width to constraint media screen
@mixin media-down($max-width) {
    @media screen and (max-width: #{$max-width}) {
        @content;
    }
}

/// Mixin to handle media query for defined min width
///
/// @content [It contains the rules to manage responsiveness for screen min width]
///
/// @param {String} $min-width - min width to constraint media screen
@mixin media-up($min-width) {
    @media screen and (min-width: #{$min-width}) {
        @content;
    }
}

/// Mixin to generate font styles
///
/// @param {Map} $font-config - Map of font configurations
/// @param {String} $font-size - Font size
/// @param {Number} $line-height - Line Height
@mixin font-style($font-config, $font-size, $line-height) {
    $font-family: map.get(
        $map: $font-config,
        $key: 'font-family',
    );
    $font-weight: map.get(
        $map: $font-config,
        $key: 'font-weight',
    );

    font-family: $font-family;
    font-weight: #{$font-weight};
    font-size: #{$font-size};
    line-height: #{$line-height};
}
/// Mixin to add card title font styles
///
/// @param {Number} $font-size - font size to apply (unitless)
/// @param {Number} $font-weight - font weight to apply (unitless)
@mixin card-title-font-style($font-size, $font-weight) {
    @include font-style(
        $circularstd-bold,
        px-to-rem($font-size),
        $line-height-120
    );
    color: $black;
}

/// Mixin to add card subtitle font styles
///
/// @param {Number} $font-size - font size to apply (unitless)
/// @param {Number} $font-weight - font weight to apply (unitless)
@mixin card-subtitle-font-style($font-size, $font-weight) {
    @include font-style(
        $inter-regular,
        px-to-rem($font-size),
        $line-height-160
    );
    color: $link-text-inactive;
}

// Placeholder for providing styling for sub title of section
%section-sub-title {
    @include font-style(
        $circularstd-bold,
        px-to-rem($section-subtitle-font-size-sm),
        $line-height-120
    );
    letter-spacing: letter-spacing-to-rem($section-subtitle-font-size-sm, 0.2);
    color: $bg-pink;

    @include media-up(map.get($map: $screen-size, $key: 'medium')) {
        @include font-style(
            $circularstd-bold,
            px-to-rem($section-subtitle-font-size-md),
            $line-height-120
        );
        letter-spacing: letter-spacing-to-rem(
            $section-subtitle-font-size-md,
            0.2
        );
    }

    @include media-up(map.get($map: $screen-size, $key: 'large')) {
        @include font-style(
            $circularstd-bold,
            px-to-rem($section-subtitle-font-size),
            $line-height-120
        );
        letter-spacing: letter-spacing-to-rem($section-subtitle-font-size, 0.2);
        text-align: start;
    }
}

// Placeholder for providing styling for title of section
%section-title {
    @include font-style(
        $circularstd-bold,
        px-to-rem($section-title-font-size-sm),
        $line-height-120
    );
    color: $black;
    text-align: center;
    text-wrap: wrap;

    @include media-up(map.get($map: $screen-size, $key: 'medium')) {
        @include font-style(
            $circularstd-bold,
            px-to-rem($section-title-font-size-md),
            $line-height-120
        );
    }

    @include media-up(map.get($map: $screen-size, $key: 'large')) {
        @include font-style(
            $circularstd-bold,
            px-to-rem($section-title-font-size),
            $line-height-120
        );
        text-align: start;
        text-wrap: balance;
    }
}

/// Mixin to add prefix properties like -moz, -webkit
///
/// @param {List} $prefixes - List of prefixes which need to be added as prefix to provided property
/// @param {String} $filter - Property to prefix
/// @param {Any} $value - Value for property
@mixin prefix-properties($prefixes, $property, $value) {
    @each $prefix in $prefixes {
        #{$prefix}-#{$property}: $value;
    }
    #{$property}: $value;
}

%grayscale-50 {
    @include prefix-properties(('-webkit', '-moz'), filter, grayscale(50%));
}

// Utility variables
$breakpoints: (
    md: 1024px,
    lg: 1440px,
); // breakpoints where we would need the utitlies to change
$flex-alignments: (
    'center',
    'space-between',
    'space-around',
    'space-between',
    'flex-start',
    'flex-end'
);
$display-props: (
    'block',
    'inline',
    'flex',
    'grid',
    'inline-block',
    'inline-flex',
    'inline-grid',
    'none'
);
$flex-directions: ('row', 'column', 'row-reverse', 'column-reverse');
$flex-spacing: (0, 1, 2, 3, 4); // spacings are provided inrem
$other-spacing: (
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    auto
); // spacings are provided inrem
$align-directions: ('center', 'start', 'end', 'justify');
$flex-wraps: ('wrap', 'nowrap', 'wrap-reverse');

/**
 * Display Utilities
 */

@each $disp in $display-props {
    .d-#{$disp} {
        display: #{$disp};
    }
}

/**
 * Flex Utilities
 */

// Flex Alignments
@each $align in $flex-alignments {
    .justify-#{$align} {
        justify-content: #{$align};
    }

    .items-#{$align} {
        align-items: #{$align};
    }

    .justify-items-#{$align} {
        justify-items: #{$align};
    }

    .content-#{$align} {
        align-content: #{$align};
    }
}

// Flex Directions
@each $direction in $flex-directions {
    .flex-#{$direction} {
        flex-direction: #{$direction};
    }
}

// Flex Spacing
@each $spacing in $flex-spacing {
    .gap-#{$spacing} {
        gap: #{$spacing}rem;
    }
}

// Flex Wrap
@each $wrap in $flex-wraps {
    .flex-#{$wrap} {
        flex-wrap: #{$wrap};
    }
}

/**
 * Margin and Padding Utilities
 */
@each $spacing in $other-spacing {
    .m-#{$spacing} {
        margin: #{$spacing}rem;
    }

    .mx-#{$spacing} {
        margin-inline: (#{$spacing}rem);
    }

    .my-#{$spacing} {
        margin-block: (#{$spacing}rem);
    }

    .ml-#{$spacing} {
        margin-inline-start: (#{$spacing}rem);
    }

    .mr-#{$spacing} {
        margin-inline-end: (#{$spacing}rem);
    }

    .mt-#{$spacing} {
        margin-block-start: (#{$spacing}rem);
    }

    .mb-#{$spacing} {
        margin-block-end: (#{$spacing}rem);
    }

    .p-#{$spacing} {
        padding: (#{$spacing}rem);
    }

    .px-#{$spacing} {
        padding-inline: (#{$spacing}rem);
    }

    .py-#{$spacing} {
        padding-block: (#{$spacing}rem);
    }

    .pl-#{$spacing} {
        padding-inline-start: (#{$spacing}rem);
    }

    .pr-#{$spacing} {
        padding-inline-end: (#{$spacing}rem);
    }

    .pt-#{$spacing} {
        padding-block-start: (#{$spacing}rem);
    }

    .pb-#{$spacing} {
        padding-block-end: (#{$spacing}rem);
    }
}

// Text Alignment
@each $align in $align-directions {
    .text-#{$align} {
        text-align: #{$align};
    }
}

// Utilities for all breakpoints
@each $break, $size in $breakpoints {
    @include media-up($size) {
        // Display Utilities
        @each $disp in $display-props {
            .#{$break}\:d-#{$disp} {
                display: #{$disp};
            }
        }

        // Flex Alignments
        @each $align in $flex-alignments {
            .#{$break}\:justify-#{$align} {
                justify-content: #{$align};
            }

            .#{$break}\:items-#{$align} {
                align-items: #{$align};
            }

            .#{$break}\:justify-items-#{$align} {
                justify-items: #{$align};
            }

            .#{$break}\:content-#{$align} {
                align-content: #{$align};
            }
        }

        // Flex Directions
        @each $direction in $flex-directions {
            .#{$break}\:flex-#{$direction} {
                flex-direction: #{$direction};
            }
        }

        // Flex Spacing
        @each $spacing in $flex-spacing {
            .#{$break}\:gap-#{$spacing} {
                gap: (#{$spacing}rem);
            }
        }

        // Margin and Padding Utilities
        @each $spacing in $other-spacing {
            .#{$break}\:m-#{$spacing} {
                margin: (#{$spacing}rem);
            }

            .#{$break}\:mx-#{$spacing} {
                margin-inline: (#{$spacing}rem);
            }

            .#{$break}\:my-#{$spacing} {
                margin-block: (#{$spacing}rem);
            }

            .#{$break}\:ml-#{$spacing} {
                margin-inline-start: (#{$spacing}rem);
            }

            .#{$break}\:mr-#{$spacing} {
                margin-inline-end: (#{$spacing}rem);
            }

            .#{$break}\:mt-#{$spacing} {
                margin-block-start: (#{$spacing}rem);
            }

            .#{$break}\:mb-#{$spacing} {
                margin-block-end: (#{$spacing}rem);
            }

            .#{$break}\:p-#{$spacing} {
                padding: (#{$spacing}rem);
            }

            .#{$break}\:px-#{$spacing} {
                padding-inline: (#{$spacing}rem);
            }

            .#{$break}\:py-#{$spacing} {
                padding-block: (#{$spacing}rem);
            }

            .#{$break}\:pl-#{$spacing} {
                padding-inline-start: (#{$spacing}rem);
            }

            .#{$break}\:pr-#{$spacing} {
                padding-inline-end: (#{$spacing}rem);
            }

            .#{$break}\:pt-#{$spacing} {
                padding-block-start: (#{$spacing}rem);
            }

            .#{$break}\:pb-#{$spacing} {
                padding-block-end: (#{$spacing}rem);
            }
        }

        // Text Alignment
        @each $align in $align-directions {
            .#{$break}\:text-#{$align} {
                text-align: #{$align};
            }
        }
    }
}
